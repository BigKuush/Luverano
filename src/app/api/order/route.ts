import { NextResponse } from 'next/server';
import { formatPrice } from '@/lib/utils/price';
import { bitrix24 } from '@/lib/bitrix24';

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
type OrderData = {
  items: Array<{
    id: number | string;
    title: string;
    price: number;
    quantity: number;
    color?: string;
    size?: string;
  }>;
  customer: {
    name: string;
    email: string;
    phone: string;
  };
  delivery: {
    type: 'free' | 'express';
    address?: string;
    date?: string;
  };
  totals: {
    subtotal: number;
    shipping: number;
    total: number;
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatOrderMessage(order: OrderData): string {
  const items = order.items.map(item => 
    `‚Ä¢ ${item.title} - ${formatPrice(item.price)} x ${item.quantity} —à—Ç.`
  ).join('\n');

  return `
üõã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ Luverano

üë§ –ö–ª–∏–µ–Ω—Ç:
–ò–º—è: ${order.customer.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}
Email: ${order.customer.email}

üì¶ –¢–æ–≤–∞—Ä—ã:
${items}

üöö –î–æ—Å—Ç–∞–≤–∫–∞:
–¢–∏–ø: ${order.delivery.type === 'free' ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è' : '–°—Ä–æ—á–Ω–∞—è'}
${order.delivery.address ? `–ê–¥—Ä–µ—Å: ${order.delivery.address}` : ''}
${order.delivery.date ? `–î–∞—Ç–∞: ${order.delivery.date}` : ''}

üí∞ –ò—Ç–æ–≥–æ:
–ü–æ–¥—ã—Ç–æ–≥: ${formatPrice(order.totals.subtotal)}
–î–æ—Å—Ç–∞–≤–∫–∞: ${formatPrice(order.totals.shipping)}
–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${formatPrice(order.totals.total)}
`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(message: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.warn('Telegram credentials not configured');
    return;
  }

  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
      }),
    });
  } catch (error) {
    console.error('Error sending to Telegram:', error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SendGrid API (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
async function sendEmail(subject: string, text: string) {
  const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;
  const ORDER_EMAIL_FROM = process.env.ORDER_EMAIL_FROM; // –Ω–∞–ø—Ä–∏–º–µ—Ä: orders@luverano.ru
  const ORDER_EMAIL_TO = process.env.ORDER_EMAIL_TO;     // –Ω–∞–ø—Ä–∏–º–µ—Ä: info@luverano.ru

  if (!SENDGRID_API_KEY || !ORDER_EMAIL_FROM || !ORDER_EMAIL_TO) {
    // –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
    return;
  }

  try {
    await fetch('https://api.sendgrid.com/v3/mail/send', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SENDGRID_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        personalizations: [
          { to: [{ email: ORDER_EMAIL_TO }], subject }
        ],
        from: { email: ORDER_EMAIL_FROM, name: 'Luverano' },
        content: [{ type: 'text/plain', value: text }],
      }),
    });
  } catch (error) {
    console.error('Error sending email:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤
export async function POST(request: Request) {
  try {
    const order: OrderData = await request.json();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatOrderMessage(order);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    await sendToTelegram(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    await sendEmail('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ Luverano', message);

    // –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
    try {
      const leadData = {
        id: Date.now(),
        customer: {
          firstName: order.customer.name.split(' ')[0] || '–ö–ª–∏–µ–Ω—Ç',
          lastName: order.customer.name.split(' ').slice(1).join(' ') || '',
          email: order.customer.email,
          phone: order.customer.phone,
          address: order.delivery.address || ''
        },
        items: order.items,
        totalAmount: order.totals.total,
        delivery: order.delivery,
        notes: `–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∞–π—Ç. ${order.delivery.address ? `–ê–¥—Ä–µ—Å: ${order.delivery.address}` : ''}`
      };

      await bitrix24.createLead(leadData);
      console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24');
    } catch (bitrixError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', bitrixError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ë–∏—Ç—Ä–∏–∫—Å24 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({ 
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' 
    });

  } catch (error) {
    console.error('Error processing order:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞' 
      },
      { status: 500 }
    );
  }
}
